<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/css/**" location="/css/" />
	<resources mapping="/js/**" location="/js/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일 사이즈 설정 가능 byte 단위
		<property name="maxUploadSize" value="100000" />
		-->
	</beans:bean>
	
	<!-- Web module에서 접근한 Conrtoller 등을 자동으로 생성하도록 scan해 주는 기본 패키지 선언  -->
	
	
	<context:component-scan base-package="com.webjjang" />
		<context:component-scan base-package="com.kakaocert.example" />
	<!--
      LinkID : 링크허브에서 발급받은 파트너 링크아이디.
      SecretKey : 링크허브에서 발급받는 비밀키.
      ClientCode : 이용기관코드, 파트너가 등록한 이용기관의 코드, (파트너 사이트에서 확인가능)
      IPRestrictOnOff : 인증토큰 발급 IP 제한 On/Off, ture-제한기능 사용(기본값-권장),  false-제한기능 미사용
	  useStaticIP : 카카오써트 API 서비스 고정 IP 사용여부, true-사용, false-미사용, 기본값(false)
  -->

  <util:properties id="EXAMPLE_CONFIG">
    <beans:prop key="LinkID">MOACARD_KC</beans:prop>
    <beans:prop key="SecretKey">cOMl9AnZ5uCdseZqvqt5vZPCaVi5o+mgQHEz4OFJ2tk=</beans:prop>
    <beans:prop key="ClientCode">021030000007</beans:prop>
    <beans:prop key="IsIPRestrictOnOff">true</beans:prop>
    <beans:prop key="UseStaticIP">false</beans:prop>
  </util:properties>


   <beans:beans>
    <!-- kakaocert Service Implementation Bean registration.  -->
    <beans:bean id="kakaocertService" class="com.kakaocert.api.KakaocertServiceImp">
      <beans:property name="linkID" value="#{EXAMPLE_CONFIG.LinkID}"/>
      <beans:property name="secretKey" value="#{EXAMPLE_CONFIG.SecretKey}"/>
      <beans:property name="IPRestrictOnOff" value="#{EXAMPLE_CONFIG.IsIPRestrictOnOff}"/>
      <beans:property name="useStaticIP" value="#{EXAMPLE_CONFIG.UseStaticIP}"/>
    </beans:bean>
  </beans:beans> 
	
	
</beans:beans>
